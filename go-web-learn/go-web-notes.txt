Go Web 服务起步：
	主要依靠 net/http 包
	通过 http.HandleFunc( 访问的URL, 处理函数名 )
	err := http.ListenAndServe(":9090", nil)	// 设置监听端口

	其中，处理函数需要有两个参数： w http.ResponseWriter, r *http.Request
	r.ParseForm()			// 解析参数, 默认不解析
	r.Form 包含 GET 请求的参数 (是一个map, key是字符串, value 是切片/数组?) (能否取得POST请求的表单信息？)
	r.URL.Path 是访问路径

	可通过 fmt.Fprintf(w, 返回客户端的字符串) 向 response包 写入返回客户端的字符串


net/http 内的Server函数：
	在开始监听后被调用，每 accept 一个客户端请求，就会创建一个 conn 然后开启一个 goroutine 以此达到高并发。


Conn的goroutine：
	Go为了实现高并发和高性能，使用了goroutine来处理Conn的读写事件
	这样每个请求都能保持独立，相互不会阻塞，可以高效的响应网络事件。
	在等待客户端请求里的源代码： go c.serve()

	客户端的每次请求都会创建一个Conn，这个Conn里面保存了该次请求的信息
	然后再传递到对应的handler，该handler中便可以读取到相应的header信息，这样保证了每个请求的独立性。	


预防跨站脚本：
	动态站点会受到一种名为“跨站脚本攻击”
	（Cross Site Scripting, 安全专家们通常将其缩写成 XSS）的威胁，而静态站点则完全不受其影响。

	攻击者通常会在有漏洞的程序中插入JavaScript、VBScript、 ActiveX或Flash以欺骗用户。一旦得手，他们可以盗取用户帐户信息，修改用户设置，盗取/污染cookie和植入恶意广告等。

	func HTMLEscape(w io.Writer, b []byte) 			// 把b进行转义之后写到w
	func HTMLEscapeString(s string) string 			// 转义s之后返回结果字符串
	func HTMLEscaper(args ...interface{}) string 	// 支持多个参数一起转义，返回结果字符串

	ex：
		fmt.Println("username:", template.HTMLEscapeString(r.Form.Get("username"))) //输出到服务器端

		template.HTMLEscape(w, []byte(r.Form.Get("username"))) 						//输出到客户端
		如果我们输入的username是<script>alert()</script>,那么我们可以在浏览器上面看到输出如下所示：
			&lt;script&gt;alert()&lt;/script&gt;

go-sql-driver：
	的DSN(data source name) 支持以下格式：
		user@unix(/path/to/socket)/dbname?charset=utf8
		user:password@tcp(localhost:5555)/dbname?charset=utf8
		user:password@/dbname
		user:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname

		主要用到的函数：
			// 打开一个注册过的数据库驱动
			// 第二个参数是 DSN
			db, err := sql.Open("mysql", "test:123456@/learn_go_db?charset=utf8")

			stmt, err := db.Prepare() 函数用来返回准备要执行的sql操作，然后返回准备完毕的执行状态。

			res, err := stmt.Exec()   函数用来执行stmt准备好的SQL语句

			id, err := res.LastInsertId()

			rows, err := db.Query()   函数用来直接执行Sql返回Rows结果。

			在 db.Prepare() 中可以看到传入的参数都是 =? 对应的数据，这样做的方式可以一定程度上防止SQL注入


Go设置cookie：

	Go中的 Cookie 对象：
		type Cookie struct {
			Name       string
			Value      string
			Path       string
			Domain     string
			Expires    time.Time
			RawExpires string

			// MaxAge=0表示未设置Max-Age属性
		    // MaxAge<0表示立刻删除该cookie，等价于"Max-Age: 0"
		    // MaxAge>0表示存在Max-Age属性，单位是秒
			MaxAge   int

			Secure   bool
			HttpOnly bool
			Raw      string
			Unparsed []string // Raw text of unparsed attribute-value pairs
		}

	Go语言中通过net/http包中的SetCookie来设置：
		http.SetCookie(w ResponseWriter, cookie *Cookie)

	如何设置cookie
	ex：
		expiration := time.Now()
		expiration = expiration.AddDate(1, 0, 0)
		cookie := http.Cookie{Name: "username", Value: "astaxie", Expires: expiration}
		http.SetCookie(w, &cookie)


XML 操作：
	通过xml包的 Unmarshal 函数来解析 XML：
		func Unmarshal(data []byte, v interface{}) error

	data 接收的是 XML 数据流，v 是需要输出的结构，定义为interface 也就是可以把XML转换为任意的格式
	我们这里主要介绍 struct 的转换，因为 struct 和 XML 都有类似树结构的特征。

	xml包 中提供了 Marshal 和 MarshalIndent 两个函数生成 xml
	这两个函数主要的区别是第二个函数会增加前缀和缩进，函数的定义如下所示：

		1.func Marshal(v interface{}) ([]byte, error)

		2.func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)

	两个函数第一个参数是用来生成XML的结构定义类型数据，都是返回生成的XML数据流。


JSON 操作：
	通过 json 包的函数进行解析：
		func Unmarshal(data []byte, v interface{}) error

	例如JSON的key是Foo，那么怎么找对应的字段呢？

		1.首先查找tag含有Foo的可导出的struct字段(首字母大写)
		2.其次查找字段名是Foo的导出字段
		3.最后查找类似FOO或者FoO这样的除了首字母之外其他大小写不敏感的导出字段

	JSON解析的时候只会解析能找得到的字段，找不到的字段会被忽略，这样的一个好处是：
		当你接收到一个很大的JSON数据结构而你却只想获取其中的部分数据的时候，
		你只需将你想要的数据对应的字段名大写，即可轻松解决这个问题。

	现在我们假设有如下的JSON数据：		EX：parser-json.go

		b := []byte(`{"Name":"Wednesday","Age":6,"Parents":["Gomez","Morticia"]}`)
		如果在我们不知道他的结构的情况下，我们把他解析到interface{}里面

		var f interface{}
		err := json.Unmarshal(b, &f)
		这个时候f里面存储了一个map类型，他们的key是string，值存储在空的interface{}里

		结构如下：
			f = map[string]interface{}{
				"Name": "Wednesday",
				"Age":  6,
				"Parents": []interface{}{
					"Gomez",
					"Morticia",
				},
			}

	bitly公司开源了一个叫做simplejson的包,在处理未知结构体的JSON时相当方便，详细例子如下所示：
		js, err := NewJson([]byte(`{
			"test": {
				"array": [1, "2", 3],
				"int": 10,
				"float": 5.150,
				"bignum": 9223372036854775807,
				"string": "simplejson",
				"bool": true
			}
		}`))

		arr, _ := js.Get("test").Get("array").Array()
		i, _ := js.Get("test").Get("int").Int()
		ms := js.Get("test").Get("string").MustString()

		可以看到，使用这个库操作JSON比起官方包来说，简单的多,详细的请参考如下地址：
			https://github.com/bitly/go-simplejson

	生成 JSON 通过JSON包里面 Marshal 函数来处理：
		func Marshal(v interface{}) ([]byte, error)

	可以通过 struct tag 来定义，这样才可以使字段名为小写字母开头：

		type Server struct {
			ServerName string `json:"serverName"`
			ServerIP   string `json:"serverIP"`
		}

		type Serverslice struct {
			Servers []Server `json:"servers"`
		}

	针对JSON的输出，我们在定义 struct tag 的时候需要注意的几点是:

		1.字段的tag是"-"，那么这个字段不会输出到JSON。

		2.tag中带有自定义名称，那么这个自定义名称会出现在JSON的字段名中例如上面例子中serverName

		3.tag中如果带有"omitempty"选项，那么如果该字段值为空，就不会输出到JSON串中

		4.如果字段类型是bool, string, int, int64等，而tag中带有",string"选项
		  那么这个字段在输出到JSON的时候会把该字段对应的值转换成JSON字符串


	Marshal函数只有在转换成功的时候才会返回数据，在转换的过程中我们需要注意几点：

		1.JSON对象只支持 string 作为 key，所以要编码一个map，
		那么必须是 map[string]T 这种类型(T是Go语言中任意的类型)

		2.Channel,complex和function是不能被编码成JSON的嵌套的数据是不能编码的，
		  不然会让JSON编码进入死循环

		3.指针在编码的时候会输出指针指向的内容，而空指针会输出null


模板操作：
	在Go语言中，我们使用 template 包来进行模板处理
	使用类似Parse、ParseFile、Execute等方法从文件或者字符串加载模板，然后执行类似上面图片展示的模板的merge操作。
	EX：
		func handler(w http.ResponseWriter, r *http.Request) {
			t := template.New("some template") 			//创建一个模板
			t, _ = t.ParseFiles("tmpl/welcome.html")  	//解析模板文件
			user := GetUser() 							//获取当前用户信息
			t.Execute(w, user)  						//执行模板的merger操作
		}

	为了演示和测试代码的方便，在例子中采用如下格式的代码：（ ex：template-test.go ）

		1.使用 Parse 代替 ParseFiles ，因为Parse可以直接测试一个字符串，而不需要额外的文件
		2.不使用 handler 来写演示代码，而是每个测试一个main，方便测试
		3.使用 os.Stdout 代替 http.ResponseWriter，因为 os.Stdout 实现了 io.Writer 接口

	1. {{range}} 这个和Go语法里面的 range 类似，循环操作数据
	2. {{with}} 操作是指当前对象的值，类似上下文的概念

	if-else 用法很怪异... 	EX： template-test-range-with.go

	嵌套模板：
		{{define "子模板名称"}}
			内容...
		{{end}}

		通过如下方式来调用：
			{{template "子模板名称"}}


文件操作：
	文件操作的大多数函数都是在os包里面，下面列举了几个目录操作的：

		func Mkdir(name string, perm FileMode) error
		创建名称为name的目录，权限设置是perm，例如0777

		func MkdirAll(path string, perm FileMode) error
		根据path创建多级子目录，例如astaxie/test1/test2。

		func Remove(name string) error
		删除名称为name的目录，当目录下有文件或者其他目录时会出错

		func RemoveAll(path string) error
		根据path删除多级子目录，如果path是单个名称，那么该目录下的子目录全部删除。

	建立与打开文件
		新建文件可以通过如下两个方法：

			1.func Create(name string) (file *File, err Error)
			根据提供的文件名创建新的文件，返回一个文件对象，默认权限是0666的文件，返回的文件对象是可读写的。

			2.func NewFile(fd uintptr, name string) *File
			根据文件描述符创建相应的文件，返回一个文件对象

		通过如下两个方法来打开文件：

			1.func Open(name string) (file *File, err Error)
			该方法打开一个名称为name的文件，但是是只读方式，内部实现其实调用了OpenFile。

			2.func OpenFile(name string, flag int, perm uint32) (file *File, err Error)
			打开名称为name的文件，flag是打开的方式，只读、读写等，perm是权限

	写文件
		写文件函数：

			1.func (file *File) Write(b []byte) (n int, err Error)
			写入byte类型的信息到文件

			2.func (file *File) WriteAt(b []byte, off int64) (n int, err Error)
			在指定位置开始写入byte类型的信息

			3.func (file *File) WriteString(s string) (ret int, err Error)
			写入string信息到文件

	读文件
		读文件函数：

			1.func (file *File) Read(b []byte) (n int, err Error)
			读取数据到 b 中

			2.func (file *File) ReadAt(b []byte, off int64) (n int, err Error)
			从 off 开始读取数据到 b 中

	删除文件：
		Go语言里面删除文件和删除文件夹是同一个函数

		func Remove(name string) Error
		调用该函数就可以删除文件名为name的文件


字符串处理：
	下面这些函数来自于strings包：

		1.func Contains(s, substr string) bool
		  字符串s中是否包含substr，返回bool值

		2.func Join(a []string, sep string) string
		  字符串链接，把slice a通过sep链接起来
		ex：
			s := []string{"foo", "bar", "baz"}
			fmt.Println(strings.Join(s, ", "))
			//Output:foo, bar, baz		

		3.func Index(s, sep string) int
		  在字符串s中查找sep所在的位置，返回位置值，找不到返回-1
		EX：
			fmt.Println(strings.Index("chicken", "ken"))
			fmt.Println(strings.Index("chicken", "dmr"))
			//Output:4
			//-1

		4.func Repeat(s string, count int) string
		  重复s字符串count次，最后返回重复的字符串
		EX：
			fmt.Println("ba" + strings.Repeat("na", 2))
			//Output:banana

		5.func Replace(s, old, new string, n int) string
		  在s字符串中，把old字符串替换为new字符串，n表示替换的次数，小于0表示全部替换
		EX:
			fmt.Println(strings.Replace("oink oink oink", "k", "ky", 2))
			fmt.Println(strings.Replace("oink oink oink", "oink", "moo", -1))
			//Output:oinky oinky oink
			//moo moo moo

		6.func Split(s, sep string) []string
		  把s字符串按照sep分割，返回slice
		EX：
			fmt.Printf("%q\n", strings.Split("a,b,c", ","))
			fmt.Printf("%q\n", strings.Split("a man a plan a canal panama", "a "))
			fmt.Printf("%q\n", strings.Split(" xyz ", ""))
			fmt.Printf("%q\n", strings.Split("", "Bernardo O'Higgins"))
			//Output:["a" "b" "c"]
			//["" "man " "plan " "canal panama"]
			//[" " "x" "y" "z" " "]
			//[""]

		7.func Trim(s string, cutset string) string
		  在s字符串的头部和尾部去除cutset指定的字符串
		EX：
			fmt.Printf("[%q]", strings.Trim(" !!! Achtung !!! ", "! "))
			//Output:["Achtung"]
			func Fields(s string) []string

		8.去除s字符串的空格符，并且按照空格分割返回slice
		EX：
			fmt.Printf("Fields are: %q", strings.Fields("  foo bar  baz   "))
			//Output:Fields are: ["foo" "bar" "baz"]


	1.Append 系列函数将整数等转换为字符串后，添加到现有的字节数组中。

	2.Format 系列函数把其他类型的转换为字符串

	3.Parse 系列函数把字符串转换为其他类型


Socket编程：
	在Go的net包中定义了很多类型、函数和方法用来网络编程，其中IP的定义如下：
		type IP []byte

		ParseIP(s string) IP 函数会把一个 IPv4 或者 IPv6 的地址转化成 IP 类型

	与服务器建立连接的过程：	(EX： http-test.go)

		在Go语言的net包中有一个类型TCPConn
		这个类型可以用来作为客户端和服务器端交互的通道，他有两个主要的函数：

			1.func (c *TCPConn) Write(b []byte) (int, error)
			2.func (c *TCPConn) Read(b []byte) (int, error)

			TCPConn可以用在客户端和服务器端来读写数据。

		还有我们需要知道一个TCPAddr类型，他表示一个TCP的地址信息，他的定义如下：

			type TCPAddr struct {
				IP IP
				Port int
				Zone string // IPv6 scoped addressing zone
			}

		在Go语言中通过ResolveTCPAddr获取一个 TCPAddr

			func ResolveTCPAddr(net, addr string) (*TCPAddr, os.Error)

			1.net参数是"tcp4"、"tcp6"、"tcp"中的任意一个
			  分别表示TCP(IPv4-only), TCP(IPv6-only)或者TCP(IPv4, IPv6的任意一个)。

			2.addr表示域名或者IP地址，例如"www.google.com:80" 或者"127.0.0.1:22"。


		Go语言中通过net包中的DialTCP函数来建立一个TCP连接，并返回一个 TCPConn 类型的对象。

		建立连接的函数定义如下：

			func DialTCP(network string, laddr, raddr *TCPAddr) (*TCPConn, error)

			network参数是"tcp4"、"tcp6"、"tcp"中的任意一个
			分别表示TCP(IPv4-only)、TCP(IPv6-only)或者TCP(IPv4,IPv6的任意一个)

			laddr表示本机地址，一般设置为nil	（本机的一般由系统自动分配吧）
			raddr表示远程的服务地址

	服务器端代码：
		在服务器端我们需要绑定服务到指定的非激活端口，并监听此端口
		当有客户端请求到达的时候可以接收到来自客户端连接的请求。
		net包中有相应功能的函数，函数定义如下：

			func ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error)
			func (l *TCPListener) Accept() (Conn, error)


	func (c *TCPConn) SetKeepAlive(keepalive bool) os.Error

	设置keepAlive属性，是操作系统层在tcp上没有数据和ACK的时候，会间隔性的发送keepalive包
	操作系统可以通过该包来判断一个tcp连接是否已经断开
	在windows上默认2个小时没有收到数据和keepalive包的时候人为tcp连接已经断开
	这个功能和我们通常在应用层加的心跳包的功能类似。


	UDP Socket：
		Go语言包中处理UDP Socket和TCP Socket不同的地方是
		在服务器端处理多个客户端请求数据包的方式不同,UDP缺少了对客户端连接请求的Accept函数

		UDP的几个主要函数如下所示：

			1.func ResolveUDPAddr(net, addr string) (*UDPAddr, os.Error)

			2.func DialUDP(net string, laddr, raddr *UDPAddr) (c *UDPConn, err os.Error)

			3.func ListenUDP(net string, laddr *UDPAddr) (c *UDPConn, err os.Error)

			4.func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err os.Error)
			
			5.func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (n int, err os.Error)