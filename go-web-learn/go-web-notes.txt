Go Web 服务起步：
	主要依靠 net/http 包
	通过 http.HandleFunc( 访问的URL, 处理函数名 )
	err := http.ListenAndServe(":9090", nil)	// 设置监听端口

	其中，处理函数需要有两个参数： w http.ResponseWriter, r *http.Request
	r.ParseForm()			// 解析参数, 默认不解析
	r.Form 包含 GET 请求的参数 (是一个map, key是字符串, value 是切片/数组?) (能否取得POST请求的表单信息？)
	r.URL.Path 是访问路径

	可通过 fmt.Fprintf(w, 返回客户端的字符串) 向 response包 写入返回客户端的字符串


net/http 内的Server函数：
	在开始监听后被调用，每 accept 一个客户端请求，就会创建一个 conn 然后开启一个 goroutine 以此达到高并发。


Conn的goroutine：
	Go为了实现高并发和高性能，使用了goroutine来处理Conn的读写事件
	这样每个请求都能保持独立，相互不会阻塞，可以高效的响应网络事件。
	在等待客户端请求里的源代码： go c.serve()

	客户端的每次请求都会创建一个Conn，这个Conn里面保存了该次请求的信息
	然后再传递到对应的handler，该handler中便可以读取到相应的header信息，这样保证了每个请求的独立性。	


预防跨站脚本：
	动态站点会受到一种名为“跨站脚本攻击”
	（Cross Site Scripting, 安全专家们通常将其缩写成 XSS）的威胁，而静态站点则完全不受其影响。

	攻击者通常会在有漏洞的程序中插入JavaScript、VBScript、 ActiveX或Flash以欺骗用户。一旦得手，他们可以盗取用户帐户信息，修改用户设置，盗取/污染cookie和植入恶意广告等。

	func HTMLEscape(w io.Writer, b []byte) 			// 把b进行转义之后写到w
	func HTMLEscapeString(s string) string 			// 转义s之后返回结果字符串
	func HTMLEscaper(args ...interface{}) string 	// 支持多个参数一起转义，返回结果字符串

	ex：
		fmt.Println("username:", template.HTMLEscapeString(r.Form.Get("username"))) //输出到服务器端

		template.HTMLEscape(w, []byte(r.Form.Get("username"))) 						//输出到客户端
		如果我们输入的username是<script>alert()</script>,那么我们可以在浏览器上面看到输出如下所示：
			&lt;script&gt;alert()&lt;/script&gt;

go-sql-driver：
	的DSN(data source name) 支持以下格式：
		user@unix(/path/to/socket)/dbname?charset=utf8
		user:password@tcp(localhost:5555)/dbname?charset=utf8
		user:password@/dbname
		user:password@tcp([de:ad:be:ef::ca:fe]:80)/dbname

		主要用到的函数：
			// 打开一个注册过的数据库驱动
			// 第二个参数是 DSN
			db, err := sql.Open("mysql", "test:123456@/learn_go_db?charset=utf8")

			stmt, err := db.Prepare() 函数用来返回准备要执行的sql操作，然后返回准备完毕的执行状态。

			res, err := stmt.Exec()   函数用来执行stmt准备好的SQL语句

			id, err := res.LastInsertId()

			rows, err := db.Query()   函数用来直接执行Sql返回Rows结果。

			在 db.Prepare() 中可以看到传入的参数都是 =? 对应的数据，这样做的方式可以一定程度上防止SQL注入


